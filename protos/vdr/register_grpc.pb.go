// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: protos/vdr/register.proto

package vdr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VDRClient is the client API for VDR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VDRClient interface {
	RegisterDidDoc(ctx context.Context, in *RegisterDidDocReq, opts ...grpc.CallOption) (*RegisterDidDocRes, error)
}

type vDRClient struct {
	cc grpc.ClientConnInterface
}

func NewVDRClient(cc grpc.ClientConnInterface) VDRClient {
	return &vDRClient{cc}
}

func (c *vDRClient) RegisterDidDoc(ctx context.Context, in *RegisterDidDocReq, opts ...grpc.CallOption) (*RegisterDidDocRes, error) {
	out := new(RegisterDidDocRes)
	err := c.cc.Invoke(ctx, "/VDR/RegisterDidDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VDRServer is the server API for VDR service.
// All implementations must embed UnimplementedVDRServer
// for forward compatibility
type VDRServer interface {
	RegisterDidDoc(context.Context, *RegisterDidDocReq) (*RegisterDidDocRes, error)
	mustEmbedUnimplementedVDRServer()
}

// UnimplementedVDRServer must be embedded to have forward compatible implementations.
type UnimplementedVDRServer struct {
}

func (UnimplementedVDRServer) RegisterDidDoc(context.Context, *RegisterDidDocReq) (*RegisterDidDocRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDidDoc not implemented")
}
func (UnimplementedVDRServer) mustEmbedUnimplementedVDRServer() {}

// UnsafeVDRServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VDRServer will
// result in compilation errors.
type UnsafeVDRServer interface {
	mustEmbedUnimplementedVDRServer()
}

func RegisterVDRServer(s grpc.ServiceRegistrar, srv VDRServer) {
	s.RegisterService(&VDR_ServiceDesc, srv)
}

func _VDR_RegisterDidDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDidDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VDRServer).RegisterDidDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VDR/RegisterDidDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VDRServer).RegisterDidDoc(ctx, req.(*RegisterDidDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VDR_ServiceDesc is the grpc.ServiceDesc for VDR service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VDR_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VDR",
	HandlerType: (*VDRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDidDoc",
			Handler:    _VDR_RegisterDidDoc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vdr/register.proto",
}
