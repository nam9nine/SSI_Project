// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: protos/vdr/registrar/registrar.proto

package registrar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DIDRegistrarClient is the client API for DIDRegistrar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DIDRegistrarClient interface {
	RegisterDidDoc(ctx context.Context, in *DIDRegistrarReq, opts ...grpc.CallOption) (*DIDRegistrarRes, error)
}

type dIDRegistrarClient struct {
	cc grpc.ClientConnInterface
}

func NewDIDRegistrarClient(cc grpc.ClientConnInterface) DIDRegistrarClient {
	return &dIDRegistrarClient{cc}
}

func (c *dIDRegistrarClient) RegisterDidDoc(ctx context.Context, in *DIDRegistrarReq, opts ...grpc.CallOption) (*DIDRegistrarRes, error) {
	out := new(DIDRegistrarRes)
	err := c.cc.Invoke(ctx, "/vdr.registrar.DIDRegistrar/RegisterDidDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DIDRegistrarServer is the server API for DIDRegistrar service.
// All implementations must embed UnimplementedDIDRegistrarServer
// for forward compatibility
type DIDRegistrarServer interface {
	RegisterDidDoc(context.Context, *DIDRegistrarReq) (*DIDRegistrarRes, error)
	mustEmbedUnimplementedDIDRegistrarServer()
}

// UnimplementedDIDRegistrarServer must be embedded to have forward compatible implementations.
type UnimplementedDIDRegistrarServer struct {
}

func (UnimplementedDIDRegistrarServer) RegisterDidDoc(context.Context, *DIDRegistrarReq) (*DIDRegistrarRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDidDoc not implemented")
}
func (UnimplementedDIDRegistrarServer) mustEmbedUnimplementedDIDRegistrarServer() {}

// UnsafeDIDRegistrarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DIDRegistrarServer will
// result in compilation errors.
type UnsafeDIDRegistrarServer interface {
	mustEmbedUnimplementedDIDRegistrarServer()
}

func RegisterDIDRegistrarServer(s grpc.ServiceRegistrar, srv DIDRegistrarServer) {
	s.RegisterService(&DIDRegistrar_ServiceDesc, srv)
}

func _DIDRegistrar_RegisterDidDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DIDRegistrarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDRegistrarServer).RegisterDidDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdr.registrar.DIDRegistrar/RegisterDidDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDRegistrarServer).RegisterDidDoc(ctx, req.(*DIDRegistrarReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DIDRegistrar_ServiceDesc is the grpc.ServiceDesc for DIDRegistrar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DIDRegistrar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdr.registrar.DIDRegistrar",
	HandlerType: (*DIDRegistrarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDidDoc",
			Handler:    _DIDRegistrar_RegisterDidDoc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vdr/registrar/registrar.proto",
}
